// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions get android => FirebaseOptions(
    apiKey: const String.fromEnvironment('FIREBASE_API_KEY_ANDROID'),
    appId: '1:98948773919:android:f8f94ee7c7db6d1b6a3d2a',
    messagingSenderId: '98948773919',
    projectId: 'chat-hands-on',
    storageBucket: 'chat-hands-on.firebasestorage.app',
  );

  static FirebaseOptions get ios => FirebaseOptions(
    apiKey: const String.fromEnvironment('FIREBASE_API_KEY_IOS'),
    appId: '1:98948773919:ios:c9bb3f1d569266bf6a3d2a',
    messagingSenderId: '98948773919',
    projectId: 'chat-hands-on',
    storageBucket: 'chat-hands-on.firebasestorage.app',
    iosBundleId: 'com.example.mcpNotionClient',
  );

  static FirebaseOptions get macos => FirebaseOptions(
    apiKey: const String.fromEnvironment('FIREBASE_API_KEY_MACOS'),
    appId: '1:1234567890:macos:dummy',
    messagingSenderId: '1234567890',
    projectId: 'mcp-notion-client',
    storageBucket: 'mcp-notion-client.appspot.com',
    iosBundleId: 'com.example.mcpNotionClient',
  );

  static FirebaseOptions get web => FirebaseOptions(
    apiKey: const String.fromEnvironment('FIREBASE_API_KEY_WEB'),
    appId: '1:98948773919:web:1eaf0ef7f75357216a3d2a',
    messagingSenderId: '98948773919',
    projectId: 'chat-hands-on',
    authDomain: 'chat-hands-on.firebaseapp.com',
    storageBucket: 'chat-hands-on.firebasestorage.app',
  );

}